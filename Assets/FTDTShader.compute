// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define C 299792458
#define e 8.8542*pow(10,-12)
#define u 1.25663706f*pow(10,-6);

#define UPDATE_H 0
#define UPDATE_E 1

struct FDTD{
    float3 pos;
    float4 color;
    float coef;
    float2 cond;
    float3 integrated;
};

RWStructuredBuffer<FDTD> HFields;

RWStructuredBuffer<FDTD> EFields;

float time;
float dist;
int resolution;
int version;
int steps;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float CEx, CEy, CEz, CHz = 0;

    int xPos = (int)(float(id.x)%(float)resolution);
    int yPos = (int)floor((float)id.x/(float)resolution);

    FDTD H = HFields[xPos+(yPos*resolution)];
    FDTD E = EFields[xPos+(yPos*resolution)];
    //HFIELD
    if(version < 1){
        //////////////////////////////////////////////////////
        // E MODE

        // CEx
        if(yPos >= resolution-1) {
            CEx = (0 - EFields[xPos+((resolution-1)*resolution)].pos.z)/dist;
        }
        else {
            CEx = (EFields[xPos+((yPos+1)*resolution)].pos.z-EFields[xPos+(yPos*resolution)].pos.z)/dist;
        }

        // CEy
        if(xPos >= resolution-1){
            CEy = -(0-EFields[xPos+(yPos*resolution)].pos.z)/dist;
        }
        else{
            CEy = -(EFields[(xPos+1)+(yPos*resolution)].pos.z-EFields[xPos+(yPos*resolution)].pos.z)/dist;
        }

        H.integrated.x += CEx;
        float mHx0 = (1/time) + (H.cond.y)/(2*e);
        float mHx1 = 1/mHx0 * ((1/time)-(H.cond.y/(2*e)));
        float mHx2 = -(1/mHx0)*(C/H.coef);
        float mHx3 = -(1/mHx0)*((C*time)/e)*(H.cond.x/H.coef);
        H.pos.x = (mHx1*H.pos.x) + (mHx2 * CEx) + (mHx3 * H.integrated.x);
        //H.pos.x = (mHx1*H.pos.x) + (mHx3 * H.integrated.x);
        /////////////////////////////////////////////////////////////////
        H.integrated.y +=  CEy;
        float mHy0 = (1/time) + ((H.cond.x)/(2*e));
        float mHy1 = (1/mHy0) * ((1/time)-((H.cond.x)/(2*e)));
        float mHy2 = -(1/mHy0)*(C/H.coef);
        float mHy3 = -(1/mHy0)*((C*time)/e)*(H.cond.y/H.coef);
        //H.pos.y = (mHy1*H.pos.y) + (mHy2 * CEy) + (mHy3 * H.integrated.y);
        H.pos.y = (mHy1*H.pos.y) + (mHy2 * CEy) + (mHy3 * H.integrated.y);
        

        HFields[xPos+(yPos*resolution)] = H;
    }

    //EFIELD
    if(version > 0){
        //////// E MODE ///////////////////////////////////////////////
        bool xOn, yOn = true;

        if(xPos!=0) xOn = false;
        if(yPos!=0) yOn = false;

        //x & y > 0
        if(!xOn && !yOn){
            if(xPos!=resolution-1){
                CHz = ((HFields[xPos+(yPos*resolution)].pos.y-HFields[(xPos+(yPos*resolution))-1].pos.y)/dist)-((HFields[xPos+(yPos*resolution)].pos.x-HFields[xPos+((yPos-1)*resolution)].pos.x)/dist);
            }
        }
        // x = 0
        else if(xOn && !yOn){
            CHz = ((HFields[yPos*resolution].pos.y-0)/dist)-((HFields[yPos*resolution].pos.x-HFields[(yPos-1)*resolution].pos.x)/dist);
        }
        // y = 0
        else if(!xOn && yOn){
            if(xPos!=resolution-1){
                CHz = ((HFields[xPos].pos.y-HFields[xPos-1].pos.y)/dist)-((HFields[xPos].pos.x-0)/dist);
            }
        }
        // x & y = 0
        else if(xOn && yOn){
            CHz = ((HFields[0].pos.y-0)/dist)-((HFields[0].pos.x-0)/dist);
        }

        E.integrated.z = E.integrated.z + (E.pos.z * E.coef);
        float mDz0 = (1/time) + ((E.cond.x+E.cond.y)/(2*e)) + ((E.cond.x*E.cond.y*time)/(4* pow(e,2)));
        float mDz1 = (1/mDz0) * ((((1/time) - (E.cond.x+E.cond.y))/(2*e)) - ((E.cond.x*E.cond.y*time)/(4* pow(e,2))));
        float mDz2 = C/mDz0;
        float mDz4 = -(1/mDz0)*(time/pow(e,2))*E.cond.x*E.cond.y;

        float Dz = (mDz1 * ((E.coef) * E.pos.z)) + (mDz2 * CHz) + (mDz4 * E.integrated.z);
        Dz = (E.pos.z * E.coef) + (C*time*CHz);
        E.pos.z = (1/EFields[xPos+(yPos*resolution)].coef)*(Dz);
        
        EFields[xPos+(yPos*resolution)] = E;
    }
}
